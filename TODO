
----Ideas:

	1) Create container like ListOfVectors with iterators and so that.
		- But maybe list< vector<bool> > is enough. Necessary to think this moment.
		- Year, you only need to write wrapper around it with iterators.
		- You need it in PseudoRandomSequences project (to storage big sequence)

----Global TODOs:

	0) Write instruction to use:
		- Algebra Interfaces
		- FixedPrecisionNumber class
		- For all the operators of stream

	1) (Interval), (Comparable) write TODOs for them.
    
    8) (Numberphile searching) need to develop my long_numbers with templates (maybe not global, only for tasks)

----Local TODOs:

	2) (FixedPrecisionNumber) write tests for comparing numbers. (check if all are right)

	7) (Extra tools) Move it into extra namespace.
	
	8) (LongNumber) Write test for to_string() method.

----Think about:

	1) I would like to add union interval and segment like the entire object (e.g. [-2, 3) U (5, +inf) ).
		- May be work with "<", "<=" symbols (from C++ STL). like container.add(5, "<=");
		- Answer: I think you need to create wrapper around Set<T> 
			because it cannot contain the function (contain), 
			or if so then wrapper will inherit from Interface IPlenty
		- What do I need the interface IPlenty for? 
			May be combine such actions like do smth over collection 
			by pattern like plenty language (set theory language). 
			Like do smth over the whole collection accept this set (plenty).

	2) (Interval) Must add check on leftBorder "<=" rightBorder?
		- Disadvantage: you take freedom from clients to use empty sets. Maybe

	3) (Interval) Must make the Infinity classes as singleton?

	4) (Interval) Think about constraining the NumericalInterval with Direction of comparators (<, <= - one direction,
			>, >= - another direction).

	7) (BigNumber) Write BigUnsignedView - wrapper around iterators over Container.

	8) (BigUnsigned) Rewrite with move-semantics


Linux problems:

	1) (FixedPrecisionNumber and EitherComparable) fix ambigious error with kek1 <= kek2